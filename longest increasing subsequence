In the given array arr[0,1,--,n-1] let L(i) be the lenght of LIS where arr[i] is the last element then we can write recurssively
L(i) = 1 + max(l(j))   where 0 < j < i  and arr[j] < arr[i];
     = 1               if no such j exits

following is the simple recurssive implementation in c++ .
     
#include<bits/stdc++.h> 
using namespace std;

int _lis(int arr[], int n, int *max);
int lis(int arr[], int n);

int main() 
{ 
	int n;
	cin>>n;
	int arr[n];
	for (int i = 0; i < n; i++)
	    cin>>arr[i];
		cout<<(lis( arr, n ))<<endl; 
	return 0; 
} 

int _lis( int arr[], int n, int *max) 
{ 
	
	if (n == 1) 
		return 1; 

	int res, max_end = 1; 
	
	for (int i = 1; i < n; i++) 
	{ 
		res = _lis(arr, i, max); 
		if (arr[i-1] < arr[n-1] && res + 1 > max_end) 
			max_end = res + 1; 
	} 

	if (*max < max_end) 
	*max = max_end; 
	
	return max_end; 
} 
int lis(int arr[], int n) 
{ 
	int max = 1; 
	_lis( arr, n, &max ); 

	return max; 
} 



In the above solution many subproblems have solved repeteadly. So by using using Tabulation/memoization method we can reduce complexity.
Here we are going to use tabulatuion method.

1. we take ana array of same lenght with initialization with 1 ,to store the lenght of increasing subsequence upto that index.
2. get maximum element from the array, that is the lenght of longest increasing subsequence of the given sequence

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	
	
	    int n;
	    cin>>n;
	    int a[n], arr[n];
	    for (int i = 0; i < n; i++) {
			arr[i] = 1;	    
			cin>>a[i];
		}
	    for (int i = 1; i < n; i++) {
	        for (int j = 0; j < i; j++) {
	            if (a[j] < a[i] && (arr[j] + 1 >= arr[i]))
	            arr[i] = arr[j] + 1;
	        }
	    }
	    int max = 1;
	    for (int i = 0; i < n; i++) {
	        if (arr[i] > max)
	        max = arr[i];
	    }
	   
	    cout<<max<<endl;
	
	return 0;
}

In the above solution it takes O(n^2) time but we can solve it in again better way that will take O(NlogN) time.
Following is the code for that

#include<bits/stdc++.h>
using namespace std;

int lis(int input[], int n);
int ceilIndex(int input[], int T[], int end, int s);
    
int main()
{
    int n;
    cin>>n;
    int arr[n];
    
    for (int i = 0; i < n; i++)
        cin>>arr[i];
    
    cout<<lis(arr,n);
}
    
int ceilIndex(int input[], int T[], int end, int s)
{
        int start = 0;
        int middle;
        int len = end;
        while (start <= end) {
            middle = (start + end) / 2;
            if (middle < len && input[T[middle]] < s && s <= input[T[middle+1]]) {
                return middle+1;
            }else if (input[T[middle]] < s) {
                start = middle+1;
            }else {
                end = middle - 1;
            }
        }
        return -1;
    }

int lis(int input[], int n){
        int T[n];
        int R[n];
        for(int i=0; i < n; i++) {
            R[i] = -1;
        }
        T[0] = 0;
        int len = 0;
        for(int i=1; i < n; i++){
            if(input[T[0]] > input[i]){ 
                T[0] = i;
            }else if(input[T[len]] < input[i]){ 
                len++;
                T[len] = i;
                R[T[len]] = T[len-1];
            }else{ 
                int index = ceilIndex(input, T, len,input[i]);
                T[index] = i;
                R[T[index]] = T[index-1];
            }
        }
        int index = T[len];
        return len+1;
    }   


